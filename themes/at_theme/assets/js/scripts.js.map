{"version":3,"sources":["global.js","op.video.js"],"names":[],"mappingsfile":"scripts.js","sourcesContent":["","/**\n * @file\n * Contains js for same page tab functionality (sticky & collapsed on mobile).\n */\n\n(function ($) {\n  Drupal.behaviors.opVideos = {\n    attach: function() {\n      // Attach the behaviour only after all slideshows on the page initialized.\n      if ($(\".paragraph--slideshow\").length > 0) {\n        var ready = false;\n        var readyCount = 0;\n        var countSlideshows = $(\".paragraph--slideshow\").length;\n\n        $(window).on(\"op-slideshow-ready\", function() {\n          if (!ready) {\n            readyCount++;\n            if (readyCount === countSlideshows) {\n              ready = true;\n              $('body').once('op-videos').each(function() {\n                Drupal.behaviors.opVideos.initialize();\n              });\n            }\n          }\n        });\n      }\n      else {\n        $('body').once('op-videos').each(function() {\n          Drupal.behaviors.opVideos.initialize();\n        });\n      }\n    },\n    initialize: function() {\n      // Check if it's iOS Safari.\n      // For iOS Safari for video slide we don't show video thumbnail.\n      // Instead we show video player. It's needed because iOS Safari\n      // doesn't support API call to start playing video.\n      var isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n\n      // Array of youtube player objects we need to control on.\n      // The key is iframe id attribute value and the value is player object.\n      var players = [];\n\n      // Get count of videos in the gallery.\n      var countVideos = $('.video iframe').length;\n\n      // Array with #id of youtube iframes.\n      var playerRefs = [];\n\n      // We are getting #ids here because slick slider populates\n      // some of slides for its purposes. So on the moment when\n      // Youtube API is ready some of iframes might be cloned with\n      // empty #id.\n      $('.video iframe').each(function(index) {\n        var attr = 'video-' + index;\n        $(this).attr('data-id', attr);\n        playerRefs.push(attr);\n      });\n\n      // If there are any videos on the page\n      if (countVideos > 0) {\n\n        // Load youtube iframe api script so that we can control video players.\n        $.getScript(\"https://www.youtube.com/iframe_api\", function() {\n\n          // On youtube API ready\n          window.onYouTubeIframeAPIReady = function() {\n\n            function onPlayerStateChange(e, currentPlayerRef) {\n              if (e.data === window.YT.PlayerState.PLAYING) {\n                // Pause all videos on the page which started playing.\n                for (var playerRef in players) {\n                  // If video started playing, pause it.\n                  if ((playerRef !== currentPlayerRef) && (players[playerRef].getCurrentTime() > 0)) {\n                    players[playerRef].pauseVideo();\n                  }\n                }\n              }\n            }\n\n            // On player is ready.\n            function onPlayerReady() {\n              countVideos--;\n              // If all players are ready trigger youtube ready event.\n              if (countVideos === 0) {\n                // Trigger custom event to notify listeners that all players are ready to be used.\n                $(window).trigger(\"op-youtube-ready\");\n              }\n            }\n\n            // Create player object for each existing youtube iframe on the page,\n            // add it to players array. Also attach onReady event so that\n            // we can be sure that all players were initialized we can control them.\n            $.each(playerRefs, function( index, playerRef ) {\n              // Make the player refer to the existing <iframe> on the page.\n              players[playerRef] = new window.YT.Player($('.video iframe[data-id=\"' + playerRef + '\"]')[0], {\n                events: {\n                  'onReady': onPlayerReady,\n                  'onStateChange': function(event) {\n                    onPlayerStateChange(event, playerRef);\n                  }\n                }\n              });\n            });\n\n            // Attach video behaviour.\n            Drupal.behaviors.opVideos.videoProcess(isiOS, players);\n          };\n        });\n      }\n    },\n    videoProcess: function(isiOS, players) {\n      if ($('.video').length > 0) {\n\n        // On iOS hide video play ico forever.\n        if (isiOS) {\n          $('.video').addClass('ios');\n        }\n\n        // Is youtube API ready.\n        var youtubeAPIready = false;\n\n        // Flag which prevents setTimeout from running twice or more times when youtube API is not\n        // ready and after user already clicked on video play icon so setTimeout is already run.\n        var isTimeoutRun = false;\n\n        $(window).on(\"op-youtube-ready\", function() {\n          youtubeAPIready = true;\n        });\n\n        // Process click on video play icon.\n        var clickVideoPlayIcon = function(players, video) {\n          $(video).addClass('video-player-shown');\n\n          // Start playing the video.\n          var playerRef = $(video).find('iframe').attr('data-id');\n\n          // Start playing video.\n          players[playerRef].playVideo();\n          players[playerRef].setPlaybackQuality('hd720');\n        };\n\n        $(window).on(\"op-youtube-stop-video\", function(e, data) {\n          if (youtubeAPIready) {\n            // Stop playing the video.\n            var playerRef = $(data.video).find('iframe').attr('data-id');\n\n            // If video started playing, pause it.\n            if (players[playerRef].getCurrentTime() > 0) {\n              players[playerRef].pauseVideo();\n            }\n          }\n        });\n\n        // Event handler on clicking on video play ico.\n        $('.video .play-icon').click(function() {\n          // If API is ready, process click.\n          if (youtubeAPIready) {\n            clickVideoPlayIcon(players, $(this).parents('.video'));\n          }\n          // If youtube API is NOT ready, try to check API in 0.5 sec and if API is ready,\n          // process clicking on video player ico.\n          // Also check if timer has been run in order not to run it again and again.\n          else if (!youtubeAPIready && !isTimeoutRun) {\n            // Set flat that timer is run.\n            isTimeoutRun = true;\n\n            // Set timer for 0.5 sec\n            setTimeout(function() {\n              if (youtubeAPIready) {\n                clickVideoPlayIcon(players, $(this).parents('.video'));\n              }\n            }, 500);\n          }\n\n        });\n      }\n    }\n  };\n})(jQuery);\n"]}